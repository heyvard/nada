"use strict";(self.webpackChunknada=self.webpackChunknada||[]).push([[301],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3934:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],i={title:"Postgres"},p=void 0,l={unversionedId:"process-data/dataverk/settings/postgres",id:"process-data/dataverk/settings/postgres",isDocsHomePage:!1,title:"Postgres",description:"Postgres connections from Jupyterhub/Airflow",source:"@site/docs/process-data/dataverk/settings/postgres.md",sourceDirName:"process-data/dataverk/settings",slug:"/process-data/dataverk/settings/postgres",permalink:"/process-data/dataverk/settings/postgres",editUrl:"https://github.com/navikt/nada/edit/master/docs/process-data/dataverk/settings/postgres.md",tags:[],version:"current",frontMatter:{title:"Postgres"},sidebar:"docs",previous:{title:"Settings file",permalink:"/process-data/dataverk/settings/README"},next:{title:"Getting started",permalink:"/process-data/gcp/getting-started"}},c=[{value:"Postgres connections from Jupyterhub/Airflow",id:"postgres-connections-from-jupyterhubairflow",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"postgres-connections-from-jupyterhubairflow"},"Postgres connections from Jupyterhub/Airflow"),(0,o.kt)("p",null,"Connections to postgres databases from Jupyterhub/Airflow requires som additional configuration compared to other\ndatabase connections. The reason for this is that postgres credentials have a TTL of 24 hours and one must periodically\nfetch new passwords when the old ones expire."),(0,o.kt)("p",null,"If you follow the guide below, dataverk will automatically fetch new password via the vault api when needed. "),(0,o.kt)("h4",{id:"1-set-up-postgres-access-for-jupyterhubairflow-namespace"},"1. Set up postgres access for Jupyterhub/Airflow namespace"),(0,o.kt)("p",null,"Depending on whether you are working from a personal or a team namespace in Jupyterhub/Airflow you need to create a\npull request in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/navikt/vault-iac"},"navikt/vault-iac"),". See\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/navikt/vault-iac/blob/master/doc/knada.md#setup-for-teams"},"setup for teams")," or\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/navikt/vault-iac/blob/master/doc/knada.md#setup-for-individual-users"},"setup for personal users"),"\nfor guides."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"After the pull request has been approved and merged you have to wait for 5-10 minutes before the changes in vault\nis synchronized."))),(0,o.kt)("h4",{id:"2-add-connection-string-in-vault"},"2. Add connection string in vault"),(0,o.kt)("p",null,"Add the connection string and the vault path for the database as key/value pairs under the path for the Jupyterhub/Airflow\nnamespace, e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'POSTGRES_CREDENTIALS: "postgres://user:pass@<host>:<port>/<database>"\nPOSTGRES_CREDS_PATH: "postgresql/preprod-fss/creds/<database>-<role>"\n')),(0,o.kt)("p",null,"You can find ",(0,o.kt)("em",{parentName:"p"},"host"),", ",(0,o.kt)("em",{parentName:"p"},"port")," and ",(0,o.kt)("em",{parentName:"p"},"database")," above in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/navikt/database-iac"},"navikt/database-iac"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Role")," is the role (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/navikt/database-iac/blob/master/README.md"},"admin, user eller readonly"),") the provisioned user shall have."),(0,o.kt)("p",null,"Note: The authentication part of the connection string (",(0,o.kt)("em",{parentName:"p"},"user:pass")," above) must be present.\nIt does not matter what you enter as dataverk will replace the values with valid credentials when you attempt to do a SQL query,\nbut there must be a default value in the connection string stored in vault."),(0,o.kt)("h4",{id:"3-settings-file"},"3. Settings file"),(0,o.kt)("p",null,"As with other secrets (described ",(0,o.kt)("a",{parentName:"p",href:"/process-data/dataverk/settings/README"},"here"),") the following must be added in the settings.json file\ndataverk uses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "db_connection_strings": {\n    "postgres_database": "${POSTGRES_CREDENTIALS}"\n  },\n  \n  "db_vault_path": {\n    "postgres_database": "${POSTGRES_CREDS_PATH}"\n  }\n}\n')),(0,o.kt)("p",null,"${POSTGRES_CREDENTIALS} and ${POSTGRES_CREDS_PATH} will be replaced with the corresponding values in vault when dataverk\nparses the settings.json file."),(0,o.kt)("h4",{id:"4-read-from-postgres"},"4. Read from postgres"),(0,o.kt)("p",null,"You can now use dataverk to read from postgres in the same way as with other databases, i.e.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from dataverk import Client\n\ndv = Client()\n\ndf = dv.read_sql("postgres_database", "SELECT * FROM table")\n')))}d.isMDXComponent=!0}}]);
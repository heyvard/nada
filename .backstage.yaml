apiVersion: backstage.io/v1alpha1
kind: Domain
metadata:
  name: nada
  description: NAV Data
spec:
  owner: nada

---
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: nav-data
  description: Markedsplassen for dataprodukter
spec:
  owner: nada
  domain: nada

---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: nada-backend
  description: An application to register and publish dataproducts, as well as to give access to dataproducts.
spec:
  type: service
  lifecycle: experimental
  owner: nada
  system: nav-data
  providesApis:
    - nada-api
  subcomponentOf: nav-data
    
---
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: nada-frontend
  description: An application to register and publish dataproducts, as well as to give access to dataproducts.
spec:
  type: website
  lifecycle: experimental
  owner: nada
  system: nav-data
  consumesApis:
    - nada-api
  subcomponentOf: nav-data

---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: nada-api
  description: OpenAPI Spec for NADA
spec:
  type: graphql
  lifecycle: experimental
  owner: nada
  system: nav-data
  definition: |
    #
    directive @authenticated(on: Boolean) on FIELD_DEFINITION
    
    #
    directive @goField(
      forceResolver: Boolean
      name: String
    ) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
    
    #
    directive @goModel(
      model: String
      models: [String!]
    ) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
    
    #
    type Access {
      #
      id: ID!
    
      #
      subject: String!
    
      #
      granter: String!
    
      #
      expires: Time
    
      #
      created: Time!
    
      #
      revoked: Time
    }
    
    #
    type BigQuery {
      #
      projectID: String!
    
      #
      dataset: String!
    
      #
      table: String!
    
      #
      schema: [TableColumn!]!
    }
    
    #
    type BigQueryTable {
      #
      description: String!
    
      #
      lastModified: Time!
    
      #
      name: String!
    
      #
      type: BigQueryType!
    }
    
    #
    enum BigQueryType {
      #
      table
    
      #
      view
    
      #
      materialized_view
    }
    
    #
    type Collection {
      #
      id: ID!
    
      #
      name: String!
    
      #
      description: String
    
      #
      created: Time!
    
      #
      lastModified: Time!
    
      #
      keywords: [String!]!
    
      #
      owner: Owner!
    
      #
      elements: [CollectionElement!]!
    }
    
    #
    union CollectionElement = Dataproduct
    
    #
    enum CollectionElementType {
      #
      dataproduct
    }
    
    #
    type Dataproduct {
      #
      id: ID!
    
      #
      name: String!
    
      #
      description: String
    
      #
      created: Time!
    
      #
      lastModified: Time!
    
      #
      repo: String
    
      #
      pii: Boolean!
    
      #
      keywords: [String!]!
    
      #
      owner: Owner!
    
      #
      datasource: Datasource!
    
      #
      requesters: [String!]!
    
      #
      access: [Access!]!
    }
    
    #
    union Datasource = BigQuery
    
    #
    type GCPProject {
      #
      id: String!
    
      #
      group: Group!
    }
    
    #
    type Group {
      #
      name: String!
    
      #
      email: String!
    }
    
    #
    type Mutation {
      #
      dummy(no: String): String
    
      #
      createCollection(input: NewCollection!): Collection!
    
      #
      updateCollection(id: ID!, input: UpdateCollection!): Collection!
    
      #
      deleteCollection(id: ID!): Boolean!
    
      #
      addToCollection(
        id: ID!
        elementID: ID!
        elementType: CollectionElementType!
      ): Boolean!
    
      #
      removeFromCollection(
        id: ID!
        elementID: ID!
        elementType: CollectionElementType!
      ): Boolean!
    
      #
      createDataproduct(input: NewDataproduct!): Dataproduct!
    
      #
      updateDataproduct(id: ID!, input: UpdateDataproduct!): Dataproduct!
    
      #
      deleteDataproduct(id: ID!): Boolean!
    
      #
      addRequesterToDataproduct(dataproductID: ID!, subject: String!): Boolean!
    
      #
      removeRequesterFromDataproduct(dataproductID: ID!, subject: String!): Boolean!
    
      #
      grantAccessToDataproduct(
        dataproductID: ID!
        expires: Time
        subject: String
        subjectType: SubjectType
      ): Access!
    
      #
      revokeAccessToDataproduct(id: ID!): Boolean!
    }
    
    #
    input NewBigQuery {
      #
      projectID: String!
    
      #
      dataset: String!
    
      #
      table: String!
    }
    
    #
    input NewCollection {
      #
      name: String!
    
      #
      description: String
    
      #
      group: String!
    
      #
      keywords: [String!]
    }
    
    #
    input NewDataproduct {
      #
      name: String!
    
      #
      description: String
    
      #
      repo: String
    
      #
      pii: Boolean!
    
      #
      keywords: [String!]
    
      #
      group: String!
    
      #
      bigquery: NewBigQuery!
    
      #
      requesters: [String!]
    }
    
    #
    type Owner {
      #
      group: String!
    
      #
      teamkatalogen: String!
    }
    
    #
    type Query {
      #
      version: String!
    
      #
      collections(limit: Int, offset: Int): [Collection!]!
    
      #
      collection(id: ID!): Collection!
    
      #
      dataproduct(id: ID!): Dataproduct!
    
      #
      dataproducts(limit: Int, offset: Int): [Dataproduct!]!
    
      #
      gcpGetTables(projectID: String!, datasetID: String!): [BigQueryTable!]!
    
      #
      gcpGetDatasets(projectID: String!): [String!]!
    
      #
      search(q: SearchQuery): [SearchResult!]!
    
      #
      userInfo: UserInfo!
    }
    
    #
    input SearchQuery {
      # Freetext search
      text: String
    
      # Filter on keyword
      keyword: String
    
      #
      limit: Int
    
      #
      offset: Int
    }
    
    #
    union SearchResult = Dataproduct | Collection
    
    #
    enum SubjectType {
      #
      user
    
      #
      group
    
      #
      serviceAccount
    }
    
    #
    type TableColumn {
      #
      name: String!
    
      #
      description: String!
    
      #
      mode: String!
    
      #
      type: String!
    }
    
    #
    scalar Time
    
    #
    input UpdateCollection {
      #
      name: String!
    
      #
      description: String
    
      #
      keywords: [String!]
    }
    
    #
    input UpdateDataproduct {
      #
      name: String!
    
      #
      description: String
    
      #
      repo: String
    
      #
      pii: Boolean!
    
      #
      keywords: [String!]
    
      #
      requesters: [String!]
    }
    
    #
    type UserInfo {
      #
      name: String!
    
      #
      email: String!
    
      #
      groups: [Group!]!
    
      #
      gcpProjects: [GCPProject!]!
    }
